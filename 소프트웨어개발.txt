1.White Box Testing ( 개발자위주 소스코드 내부를 보면서 Testing )
 1) 프로그램의 내부 구조, 동작을 디테일하게 검사.
 2) 내부 소스코드를 테스트 하는 기법
 3) 개발자 관점의 테스트 방법
    - 문장검증
    - 선택검증
    - 경로검증
    - 조건검증

2.Black Box Test 기법 ( 소드코드를 보지 않고 Testing)
 1) Boundary Value Analysis
 2) 소프트웨어의 내부 구조나 작동 원리를 모르는 상태에서 동작을 검사.
 3) 내가 원하는 기능이 예측한 대로 정상 동작하는지를 확인
 4) 사용자 관점의 테스트 방법
    - 동등 분할 기법*          예) 90 ~ 100 사이 95 동등 분할 기법
    - 경계값 분석 기법*        예) 90에 경계갑 89,90,91 / 100 경계갑 99,100,101
    - 오류 예측 기법
    - 원인 결과 그래프 기법
    - 의사결정 테이블 테스팅
    - 상태 전이 테스팅

3. 소프트웨어 품질 측정 ( 3R - 역공학, 재공학, 재사용)
 1) 정확성 : 요구사항을 만족
 2) 무결성 : 허가 받지 않은 사람이 자료에 접근할 수 없도록
 3) 사용성 : 사용자가 편리하게(배우는데) 요구되는 노력
 4) 신뢰성 : 장애없이
 5) 효율성 : 시스템 자원과 코드량의 최적화
 6) 유지 보수성 : 오류를 발견하고 수정
 7) 이식성 : 다른환경으로 이전
 8) 재사용성 : 소프트웨어 일부를 다른 시스템에서 재사용할 수 있도록

4. 인터페이스 구현 검증도구*
 1) xUnit : Java, C++, .net 등 다양한 언어를 지원하는 단위테스트
 2) STAF : 서비스 호출, 컴포넌트 재사용
 3) FitNesse : 웹기반 테스트
 4) watir : Ruby 테스트
 5) Selenium : 웹 애플리케이션 테스트

5. EAI
 1) 기업에서 운영되는 서로 다른 플랫폼 및 애플리케이션 간의 "정보전달, 연계, 통합"을 가능하게 해주는 솔루션
 2) 구축유형
    - Point-to-Point
    - Hun & Spoke
    - Message Bus
    - Hybrid

6. SSO - 통합로그인

7. 인터페이스 보안 기능 적용
 1) 네트워크 영역
    - 송/수신간 스니핑 등 데이터 탈취 및 변조 위협 방지 ( 네트워크 트래픽에 대한 암호화 )
    방식) IPSec, SSL, S-HTTP
    - 애플리케이션 영역 ( 코드상 보안 취약점을 보완 )
    방식) 시큐어 코딩*, 암호화

8. 반정규화 ( 정규화 이후 인덱스, 뷰 등등을 하고도 속도 향상이 안될 경우 반정규화 사용 )
 1) 데이터 베이스 정규화 후 성능향상, 개발 편의성등의 정규화 기법에 위배된 의도적 수행기법
   - 테이블 분할 : 수평분할, 수직분할
   - 테이블 중복 : 통계 테이블 추가, 진행 테이블 추가
   - 컬럼 중복 : 중복 컬럼추가, 파생 컬럼 추가

9. ISO/IEC 9126의 소프트웨어 품질 특성
 1) 기능성 : 정확성
 2) 신뢰성 : 오류가 없어야하는 것
 3) 사용성 : 이해성, 학습성
 4) 효율성 : 시간반응성, 자원효율성
 5) 유지부수성 : 분석성, 변경성, 안정성
 6) 이식성 : 적응성, 설치성, 공존성

10. 트리차수 : 자식이 많은 차수 / 단말 노드 : 자식이 없는 단말노드

11. 디지털 저작권 관리(DRM)
 1) 크랙방지 기술
 2) 정책관리 기술
 3) 암호화 기술

12. DRM 기술 요소
 1) 암호화
 2) 키관리
 3) 식별기술
 4) 저작권 표현
 5) 정책 관리
 6) 크랙 방지
 7) 인증
 8) 인터페이스
 9) 사용권한

13. Brooks의 법칙
 1) 지연되는 프로젝트에 인력을 더 투입하면 오히려 늦어진다.

14. Boehm의 법칙
 1) 비용 산정 기법(COCOMO)
 2) 나선형 모델

15. 형상관리
 1) 소프트웨어 개발 과정에서 발생하는 모든 변경을 관리하는 활동
 2) 협업을 진행하는 멤버들의 공유 및 변경이력 관리
 3) 소스코드, 각종 설계 문서, 회의록 등의 모든 문서가 형상관리 대상이다.
 - 형상관리 도구 : CSV, SVN, GIT

16. 알고리즘 시간복잡도 0(1) - 그냥 한방에 간다~ 제일 빠르다
 1) 해싱, 배열

17. 알고리즘 시간복잡도
 1) O(N2) : 삽입, 선택, 버블
 2) O(nlog2n) : 퀵, 힙 병합
 3) O(N) : 순차탐색
 4) O(log2n) : 이진탐색
 5) 0(1) : 해싱, 배열

18. 소프트웨어 정적 분석 도구
 1) 소스코드를 실행하지 않고, 코딩 표준, 코딩 스타일, 구조와 의존광계등을 분석
 2) 정적분석 도구
    - pmd, SonarQube, Find Bug, Checkstyle, cppcheck, corbertura

19. 동치 분할 검사(블랙박스 테스트)
 1) 입력 자료에 초점을 맞춰 검사 사례를 만들고 검사하는 방법

20. 검증검사(인수테스트)
 1) 형상검사 : 구성요소, 목록, 유지보수를 위한 애용이 표현되었는 지검사
 2) 알파검사* : 사용자가 개발자 앞에서 개발자와 함께 오류, 사용상의 문제 검사
 3) 베타검사* : 선정된 사용자를 제한되지 않은 환경에서 프로그램을 사용하게 하고, 오류가 발견되면 개발자에게 통보

21. SW 패키징 도구 활용 시 고려 사항
 1) 반드시 암호화/보안을 고려
 2) 추가로 다양한 이기종 연동을 고려
 3) 사용자 편의성을 위한 복잡성 및 비효율성 문제를 고려
 4) 애플리케이션의 종류에 적합한 암호화 알고리즘을 적용
 5) 지속적인 배포를 고려

22. 외계인코드 : 아주 오래되거나 참고문서 또는 개발자없어 유지보수 어려움
    스파게티코드  : 로직이 복잡하여 이해하기 어려움 (더러운코드 으으으 시러)



